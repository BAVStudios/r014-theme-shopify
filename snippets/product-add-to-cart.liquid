<div {{ block.shopify_attributes }}>
  {%- if product != blank -%}
    {%- liquid
      assign gift_card_recipient_feature_active = false
      if block.settings.show_gift_card_recipient and product.gift_card?
        assign gift_card_recipient_feature_active = true
      endif

      assign show_dynamic_checkout = false
      if block.settings.show_dynamic_checkout and gift_card_recipient_feature_active == false
        assign show_dynamic_checkout = true
      endif

      assign product_template = product.template_suffix

      if product.metafields.theme.preorder and product.available
        assign product_template = 'pre-order'
      endif
    -%}
    <product-form
      class="product-form"
      data-section="{{ section.id }}"
      data-hide-errors="{{ gift_card_recipient_feature_active }}"
      template="{{ product_template }}"
    >
      <div class="product-form__error-message-wrapper form-notification error" role="alert" hidden>
        {% render 'svg-icons' with 'thb-error' %}
        <span class="product-form__error-message"></span>
      </div>
      {%- form 'product',
        product,
        id: product_form_id,
        class: 'form',
        novalidate: 'novalidate',
        data-type: 'add-to-cart-form'
      -%}
        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}" disabled>
        {%- if gift_card_recipient_feature_active -%}
          {%- render 'gift-card-recipient-form', product: product, form: form, section: section -%}
        {%- endif -%}
        <div class="product-add-to-cart-container">
          <div class="form-notification error" style="display:none;"></div>
          <div class="add_to_cart_holder">
            {%- if block.settings.show_quantity_selector -%}
              <div
                id="quantity-{{ section.id }}"
                class="quantity-wrapper"
                {{ block.shopify_attributes }}
              >
                <quantity-selector class="quantity">
                  <button
                    class="minus"
                    type="button"
                    aria-label="{{ 'products.product.quantity.decrease' | t: product: product.title | escape }}"
                  >
                    {% render 'svg-icons' with 'minus' %}
                  </button>
                  <input
                    type="number"
                    id="Quantity-{{ section.id }}"
                    name="quantity"
                    class="qty"
                    value="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
                    min="{{ product.selected_or_first_available_variant.quantity_rule.min }}"
                    
                    {% if product.selected_or_first_available_variant.quantity_rule.max != null %}
                      max="{{ product.selected_or_first_available_variant.quantity_rule.max }}"
                    {% endif %}
                    {% comment %}
                    This is now replaced with max quantity selector 

                    

                    {% if product.metafields.custom.enable_length_selector %}
                      max="20000"
                    {% elsif product.selected_or_first_available_variant.quantity_rule.max != null %}
                      max="{{ product.selected_or_first_available_variant.quantity_rule.max }}"
                    {% endif %}
                    {% endcomment %}
                    step="{{ product.selected_or_first_available_variant.quantity_rule.increment }}"
                    form="{{ product_form_id }}"
                    aria-label="{{ 'products.product.quantity.input_label' | t: product: product.title | escape }}"
                  >
                  <button
                    class="plus"
                    type="button"
                    aria-label="{{ 'products.product.quantity.increase' | t: product: product.title | escape }}"
                  >
                    {% render 'svg-icons' with 'plus' %}
                  </button>
                </quantity-selector>
              </div>
            {%- endif -%}
            <button
              type="submit"
              name="add"
              id="AddToCart"
              class="single-add-to-cart-button button{% if section.settings.outline_button %} outline{% endif %} {% unless product.selected_or_first_available_variant.available %}sold-out{% endunless %}"
              {% if product.selected_or_first_available_variant.available == false %}
                disabled
              {% endif %}
            >
              <span class="single-add-to-cart-button--text">
                {%- liquid
                  if product.selected_or_first_available_variant.available == false
                    assign button_content = 'products.product.sold_out' | t
                  else
                    if product_template == 'pre-order'
                      assign button_content = 'products.product.pre_order' | t
                    else
                      assign button_content = 'products.product.add_to_cart' | t
                    endif
                  endif
                -%}
                {{- button_content -}}
              </span>
              <span class="loading-overlay">
                {% render 'svg-icons' with 'thb-loading' %}
              </span>
            </button>
            {%- if show_dynamic_checkout -%}
              {{ form | payment_button }}
            {%- endif -%}
          </div>
        </div>
      {%- endform -%}
    </product-form>
  {%- else -%}
    <div class="product-form">
      <div class="product-form__buttons form">
        <button
          type="submit"
          name="add"
          class="single_add_to_cart_button button sold-out"
          disabled
        >
          <span class="single-add-to-cart-button--text">{{ 'products.product.sold_out' | t }}</span>
        </button>
      </div>
    </div>
  {%- endif -%}
</div>

<!-- CSS to hide quantity when custom length is selected -->
<style>
  /* Hide quantity selector when custom length is active */
  .custom-option-selected ~ * .quantity-wrapper,
  .custom-option-selected ~ * .quantity,
  .custom-option-selected ~ * quantity-selector {
    display: none !important;
  }

  /* More specific selectors for the quantity wrapper */
  .custom-length-box.custom-option-selected ~ .product-form .quantity-wrapper,
  .custom-length-box.custom-option-selected ~ .product-form .quantity,
  .custom-length-box.custom-option-selected ~ .product-form quantity-selector {
    display: none !important;
  }

  /* Disable pointer events and visual feedback when custom length is active */
  quantity-selector.custom-length-disabled .minus,
  quantity-selector.custom-length-disabled .plus {
    pointer-events: none;
    opacity: 0.5;
    cursor: not-allowed;
  }

  quantity-selector.custom-length-disabled .qty {
    background-color: #f5f5f5;
    cursor: not-allowed;
  }
</style>

<!-- Enhanced JavaScript to handle custom length quantity calculation -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const customLengthBox = document.querySelector('.custom-length-box');
    const quantityWrapper = document.querySelector('.quantity-wrapper');
    const quantitySelector = document.querySelector('.quantity');
    const quantityInput = document.querySelector('#Quantity-{{ section.id }}');
    const productForm = document.querySelector('form[data-type="add-to-cart-form"]');

    if (!customLengthBox || !quantityInput) return;

    // Function to toggle quantity visibility
    function toggleQuantityVisibility() {
      const isCustomSelected = customLengthBox.classList.contains('custom-option-selected');

      if (isCustomSelected) {
        // Hide quantity selector UI but keep the input functional
        if (quantityWrapper) quantityWrapper.style.display = 'none';
        if (quantitySelector) quantitySelector.style.display = 'none';

        // Disable the quantity selector buttons functionality
        const quantityElement = quantitySelector?.closest('quantity-selector');
        if (quantityElement) {
          quantityElement.classList.add('custom-length-disabled');
        }

        console.log('Quantity selector hidden for custom length');
      } else {
        // Show quantity selector
        if (quantityWrapper) quantityWrapper.style.display = '';
        if (quantitySelector) quantitySelector.style.display = '';

        // Re-enable the quantity selector buttons functionality
        const quantityElement = quantitySelector?.closest('quantity-selector');
        if (quantityElement) {
          quantityElement.classList.remove('custom-length-disabled');
        }

        console.log('Quantity selector shown for regular variants');
      }
    }

    // Create observer to watch for custom length selection changes
    const observer = new MutationObserver(function (mutations) {
      mutations.forEach(function (mutation) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
          toggleQuantityVisibility();
        }
      });
    });

    // Start observing the custom length box
    observer.observe(customLengthBox, { attributes: true });

    // Run initially with a slight delay to ensure DOM is ready
    setTimeout(() => {
      toggleQuantityVisibility();
    }, 100);

    // Listen for variant changes
    document.addEventListener('variant:change', function () {
      setTimeout(() => {
        toggleQuantityVisibility();
      }, 50);
    });

    // Prevent manual quantity changes when custom length is active
    document.addEventListener(
      'click',
      function (e) {
        if (e.target.matches('.quantity .plus, .quantity .minus')) {
          const isCustomSelected = customLengthBox.classList.contains('custom-option-selected');
          if (isCustomSelected) {
            e.preventDefault();
            e.stopPropagation();
            return false;
          }
        }
      },
      true
    );
  });
</script>

{%- if pickup -%}
  {%- assign pick_up_availabilities = product.selected_or_first_available_variant.store_availabilities
    | where: 'pick_up_enabled', true
  -%}
  <pickup-availability
    class="pickup-availability-wrapper"
    {% if product.selected_or_first_available_variant.available and pick_up_availabilities.size > 0 %}
      available
    {% endif %}
    data-root-url="{{ routes.root_url }}"
    data-variant-id="{{ product.selected_or_first_available_variant.id }}"
    data-has-only-default-variant="{{ product.has_only_default_variant }}"
  >
    {%- assign pick_up_availabilities = product.selected_or_first_available_variant.store_availabilities
      | where: 'pick_up_enabled', true
    -%}
    {%- if pick_up_availabilities.size > 0 -%}
      {% render 'product-pickup-availability',
        pick_up_availabilities: pick_up_availabilities,
        product_variant: product.selected_or_first_available_variant
      %}
    {% endif %}
  </pickup-availability>
  <script src="{{ 'pickup-availability.js' | asset_url }}" defer="defer"></script>
{%- endif -%}
